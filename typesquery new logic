import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional
public class ProfileServiceImpl implements ProfileService {

    private final ProfileRepository profileRepository;
    private final EntityManager entityManager;

    @Autowired
    public ProfileServiceImpl(ProfileRepository profileRepository, EntityManager entityManager) {
        this.profileRepository = profileRepository;
        this.entityManager = entityManager;
    }

    @Override
    public Profile createProfile(Profile profile) {
        return profileRepository.save(profile);
    }

    @Override
    public SearchResponse<Profile> searchProfiles(SearchRequest searchRequest) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Profile> query = cb.createQuery(Profile.class);
        Root<Profile> root = query.from(Profile.class);
        query.select(root).where(buildPredicates(searchRequest.getSearchCriteria(), cb, root));

        // Sort the results if sortColumn and sortDirection are provided
        if (searchRequest.getSortColumn() != null && searchRequest.getSortDirection() != null) {
            Sort sort = Sort.by(searchRequest.getSortDirection(), searchRequest.getSortColumn());
            query.orderBy(getSortOrder(sort, cb, root));
        }

       TypedQuery<Profile> typedQuery = entityManager.createQuery(query);

        // Apply pagination
        int page = searchRequest.getPage();
        int pageSize = searchRequest.getPageSize();
        typedQuery.setFirstResult(page * pageSize);
        typedQuery.setMaxResults(pageSize);

        List<Profile> resultList = typedQuery.getResultList();

        // Count the total elements for pagination
        CriteriaQuery<Long> countQuery = cb.createQuery(Long.class);
        countQuery.select(cb.count(countQuery.from(Profile.class))).where(buildPredicates(searchRequest.getSearchCriteria(), cb, root));
        Long totalElements = entityManager.createQuery(countQuery).getSingleResult();

        int totalPages = (int) Math.ceil((double) totalElements / pageSize);

        SearchResponse<Profile> searchResponse = new SearchResponse<>();
        searchResponse.setData(new PageImpl<>(resultList, PageRequest.of(page, pageSize), totalElements));
        searchResponse.setTotalElements(totalElements);
        searchResponse.setTotalPages(totalPages);

        return searchResponse;
    }



    }

    private Predicate[] buildPredicates(List<SearchCriteria> searchCriteria, CriteriaBuilder cb, Root<Profile> root) {
        List<Predicate> predicates = new ArrayList<>();
        for (SearchCriteria criteria : searchCriteria) {
            String key = criteria.getKey();
            QueryOperation operation = criteria.getOperation();
            Object value = criteria.getValue();

            if (operation == null || key == null || value == null) {
                continue;
            }

            if (key.equals("source_list_column")) {
                Join<Profile, String> sourceListJoin = root.joinSet("sourceListAttribute");
                switch (operation) {
                    case EQUALS:
                        predicates.add(sourceListJoin.in(convertToProperTypeList(value)));
                        break;
                    case NOT_EQUALS:
                        predicates.add(cb.not(sourceListJoin.in(convertToProperTypeList(value))));
                        break;
                    case IN:
                        predicates.add(sourceListJoin.in(convertToProperTypeList(value)));
                        break;
                    case NOT_IN:
                        predicates.add(cb.not(sourceListJoin.in(convertToProperTypeList(value))));
                        break;
                    case CONTAINS:
                        for (Object item : convertToProperTypeList(value)) {
                            predicates.add(cb.like(sourceListJoin, "%" + item + "%"));
                        }
                        break;
                    case NOT_CONTAINS:
                        for (Object item : convertToProperTypeList(value)) {
                            predicates.add(cb.notLike(sourceListJoin, "%" + item + "%"));
                        }
                        break;
                    default:
                        break;
                }
            } else {
                switch (operation) {
                    case EQUALS:
                        predicates.add(cb.equal(root.get(key), convertToProperType(value)));
                        break;
                    case NOT_EQUALS:
                        predicates.add(cb.notEqual(root.get(key), convertToProperType(value)));
                        break;
                    case IN:
                        predicates.add(root.get(key).in(convertToProperTypeList(value)));
                        break;
                    case NOT_IN:
                        predicates.add(cb.not(root.get(key).in(convertToProperTypeList(value))));
                        break;
                    case CONTAINS:
                        predicates.add(cb.like(root.get(key), "%" + value + "%"));
                        break;
                    case NOT_CONTAINS:
                        predicates.add(cb.notLike(root.get(key), "%" + value + "%"));
                        break;
                    default:
                        break;
                }
            }
        }
        return predicates.toArray(new Predicate[0]);
    }

    private Object convertToProperType(Object value) {
        if (value instanceof String) {
            try {
                return new SimpleDateFormat("dd-MM-yyyy").parse((String) value);
            } catch (ParseException e) {
                // If parsing fails, return the original string as-is
                return value;
            }
        }
        return value;
    }

    private List<String> convertToProperTypeList(Object value) {
        List<String> list = new ArrayList<>();
        if (value instanceof List) {
            List<Object> valueList = (List<Object>) value;
            for (Object item : valueList) {
                if (item instanceof String) {
                    list.add((String) item);
                }
            }
        } else if (value instanceof String) {
            list.add((String) value);
        }
        return list;
    }

    private List<javax.persistence.criteria.Order> getSortOrder(Sort sort, CriteriaBuilder cb, Root<Profile> root) {
        List<javax.persistence.criteria.Order> orders = new ArrayList<>();
        for (Sort.Order sortOrder : sort) {
            if (sortOrder.isAscending()) {
                orders.add(cb.asc(root.get(sortOrder.getProperty())));
            } else {
                orders.add(cb.desc(root.get(sortOrder.getProperty())));
            }
        }
        return orders;
    }
}
