################### entity ###########################

import javax.persistence.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Set;

@Entity
@Table(name = "profile")
public class Profile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @Column(name = "dob")
    private String dateOfBirth;

    private String status;

    @ElementCollection
    @CollectionTable(name = "profile_source_list", joinColumns = @JoinColumn(name = "profile_id"))
    @Column(name = "source_list")
    private Set<String> sourceListAttribute;

    private String countries;

    @Column(name = "class")
    private String profileClass;

    @Column(name = "creation_date")
    private String creationDate;

    @Column(name = "last_updated_date")
    private String lastUpdatedDate;

    // Getters and setters, constructors...

    // Additional methods for date handling
    public void setDateOfBirth(LocalDate dateOfBirth) {
        this.dateOfBirth = formatDate(dateOfBirth);
    }

    public void setCreationDate(LocalDate creationDate) {
        this.creationDate = formatDate(creationDate);
    }

    public void setLastUpdatedDate(LocalDate lastUpdatedDate) {
        this.lastUpdatedDate = formatDate(lastUpdatedDate);
    }

    private String formatDate(LocalDate date) {
        return date != null ? date.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")) : null;
    }

    public LocalDate getLocalDateFromString(String date) {
        if (date == null || date.isEmpty()) {
            return null;
        }
        return LocalDate.parse(date, DateTimeFormatter.ofPattern("dd-MM-yyyy"));
    }
}


##################################################### 

public enum QueryOperation {
    EQUALS,
    NOT_EQUALS,
    IN,
    NOT_IN,
    CONTAINS,
    NOT_CONTAINS,
    BETWEEN
}
 ##############################################################33


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Service
@Transactional
public class ProfileServiceImpl implements ProfileService {

    private final ProfileRepository profileRepository;
    private final EntityManager entityManager;

    @Autowired
    public ProfileServiceImpl(ProfileRepository profileRepository, EntityManager entityManager) {
        this.profileRepository = profileRepository;
        this.entityManager = entityManager;
    }

    @Override
    public Profile createProfile(Profile profile) {
        // Convert LocalDate to formatted String before saving
        profile.setDateOfBirth(profile.getLocalDateFromString(profile.getDateOfBirth()));
        profile.setCreationDate(profile.getLocalDateFromString(profile.getCreationDate()));
        profile.setLastUpdatedDate(profile.getLocalDateFromString(profile.getLastUpdatedDate()));
        return profileRepository.save(profile);
    }

    @Override
    public SearchResponse<Profile> searchProfiles(SearchRequest searchRequest) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Profile> query = cb.createQuery(Profile.class);
        Root<Profile> root = query.from(Profile.class);
        query.select(root).where(buildPredicates(searchRequest.getCriteriaList(), cb, root));

        SortDirection sortDirection = searchRequest.getSortDirection();
        String sortColumn = searchRequest.getSortColumn();
        if (sortColumn != null && sortDirection != null) {
            if (sortDirection == SortDirection.ASC) {
                query.orderBy(cb.asc(root.get(sortColumn)));
            } else {
                query.orderBy(cb.desc(root.get(sortColumn)));
            }
        }

        TypedQuery<Profile> typedQuery = entityManager.createQuery(query);

        // Calculate the total number of results without pagination
        int totalResults = typedQuery.getResultList().size();

        // Perform manual pagination
        int page = searchRequest.getPageNumber();
        int pageSize = searchRequest.getPageSize();
        int startPosition = (page - 1) * pageSize;

        
        typedQuery.setFirstResult(startPosition);
        typedQuery.setMaxResults(pageSize);

        List<Profile> resultList = typedQuery.getResultList();

        SearchResponse<Profile> searchResponse = new SearchResponse<>();
        searchResponse.setData(new PageImpl<>(resultList, PageRequest.of(page - 1, pageSize), totalResults));
        searchResponse.setTotalElements((long) totalResults);
        searchResponse.setTotalPages((int) Math.ceil((double) totalResults / pageSize));

        return searchResponse;
    }

    private Predicate[] buildPredicates(List<SearchCriteria> searchCriteria, CriteriaBuilder cb, Root<Profile> root) {
        List<Predicate> predicates = new ArrayList<>();
        for (SearchCriteria criteria : searchCriteria) {
            String key = criteria.getQueryKey();
            QueryOperation operation = criteria.getQueryOperation();
            Object value = criteria.getQueryValue();

            if (operation == null || key == null || value == null) {
                continue;
            }

            if (key.equals("sourceList")) {
                Join<Profile, String> sourceListJoin = root.joinSet("sourceListAttribute");
                switch (operation) {
                    case EQUALS:
                        predicates.add(sourceListJoin.in(convertToProperTypeList(value)));
                        break;
                    case NOT_EQUALS:
                        predicates.add(cb.not(sourceListJoin.in(convertToProperTypeList(value))));
                        break;
                    case IN:
                        predicates.add(sourceListJoin.in(convertToProperTypeList(value)));
                        break;
                    case NOT_IN:
                        predicates.add(cb.not(sourceListJoin.in(convertToProperTypeList(value))));
                        break;
                    case CONTAINS:
                        for (Object item : convertToProperTypeList(value)) {
                            predicates.add(cb.like(sourceListJoin, "%" + item + "%"));
                        }
                        break;
                    case NOT_CONTAINS:
                        for (Object item : convertToProperTypeList(value)) {
                            predicates.add(cb.notLike(sourceListJoin, "%" + item + "%"));
                        }
                        break;
                    case BETWEEN:
                        if (value instanceof List) {
                            List<Object> valueList = (List<Object>) value;
                            if (valueList.size() >= 2) {
                                Object startValue = convertToProperType(valueList.get(0));
                                Object endValue = convertToProperType(valueList.get(1));
                                predicates.add(cb.between(sourceListJoin, startValue, endValue));
                            }
                        }
                        break;
                    default:
                        break;
                }
            } else {
                switch (operation) {
                    case EQUALS:
                        predicates.add(cb.equal(root.get(key), convertToProperType(value)));
                        break;
                    case NOT_EQUALS:
                        predicates.add(cb.notEqual(root.get(key), convertToProperType(value)));
                        break;
                    case IN:
                        predicates.add(root.get(key).in(convertToProperTypeList(value)));
                        break;
                    case NOT_IN:
                        predicates.add(cb.not(root.get(key).in(convertToProperTypeList(value))));
                        break;
                    case CONTAINS:
                        predicates.add(cb.like(root.get(key), "%" + value + "%"));
                        break;
                    case NOT_CONTAINS:
                        predicates.add(cb.notLike(root.get(key), "%" + value + "%"));
                        break;
                    case BETWEEN:
                        if (value instanceof List) {
                            List<Object> valueList = (List<Object>) value;
                            if (valueList.size() >= 2) {
                                Object startValue = convertToProperType(valueList.get(0));
                                Object endValue = convertToProperType(valueList.get(1));
                                predicates.add(cb.between(root.get(key), startValue, endValue));
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        return predicates.toArray(new Predicate[0]);
    }

    private Object convertToProperType(Object value) {
        if (value instanceof String) {
            try {
                return LocalDate.parse((String) value, DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            } catch (DateTimeParseException e) {
                // If parsing fails, return the original string as-is
                return value;
            }
        }
        return value;
    }

    private List<String> convertToProperTypeList(Object value) {
        List<String> list = new ArrayList<>();
        if (value instanceof List) {
            List<Object> valueList = (List<Object>) value;
            for (Object item : valueList) {
                if (item instanceof String) {
                    list.add((String) item);
                }
            }
        } else if (value instanceof String) {
            list.add((String) value);
        }
        return list;
    }

    private List<javax.persistence.criteria.Order> getSortOrder(Sort sort, CriteriaBuilder cb, Root<Profile> root) {
        List<javax.persistence.criteria.Order> orders = new ArrayList<>();
        for (Sort.Order sortOrder : sort) {
            if (sortOrder.isAscending()) {
                orders.add(cb.asc(root.get(sortOrder.getProperty())));
            } else {
                orders.add(cb.desc(root.get(sortOrder.getProperty())));
            }
        }
        return orders;
    }
}



##############################################################################################



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/profiles")
public class ProfileController {

    private final ProfileService profileService;

    @Autowired
    public ProfileController(ProfileService profileService) {
        this.profileService = profileService;
    }

    @PostMapping
    public ResponseEntity<Profile> createProfile(@RequestBody Profile profile) {
        Profile createdProfile = profileService.createProfile(profile);
        return new ResponseEntity<>(createdProfile, HttpStatus.CREATED);
    }

    @PostMapping("/search")
    public ResponseEntity<SearchResponse<Profile>> searchProfiles(@RequestBody SearchRequest searchRequest) {
        SearchResponse<Profile> searchResponse = profileService.searchProfiles(searchRequest);
        return new ResponseEntity<>(searchResponse, HttpStatus.OK);
    }
}


