@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/search")
    public ResponseEntity<List<User>> searchUsers(@RequestBody SearchRequest searchRequest) {
        List<SearchCriteria> searchCriteriaList = searchRequest.getSearchCriteriaList();
        String sortColumn = searchRequest.getSortColumn();
        String sortDirection = searchRequest.getSortDirection();

        List<User> users = userService.searchUsers(searchCriteriaList, sortColumn, sortDirection);

        return ResponseEntity.ok(users);
    }
}



public class SearchRequest {
    private List<SearchCriteria> searchCriteriaList;
    private String sortColumn;
    private String sortDirection;

    // Constructors, getters, and setters
}


@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> searchUsers(List<SearchCriteria> searchCriteriaList, String sortColumn, String sortDirection) {
        Sort sort = Sort.by(Sort.Direction.ASC, "id"); // Default sorting by id in ascending order
        if (sortColumn != null && sortDirection != null) {
            Sort.Direction direction = Sort.Direction.fromString(sortDirection.toUpperCase());
            sort = Sort.by(direction, sortColumn);
        }

        return userRepository.findAll((root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            for (SearchCriteria criteria : searchCriteriaList) {
                // ... (same as the previous code)
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        }, sort);
    }

    // ... (the rest of the code remains the same)
}


### ANOTHER LOGIC ####

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/search")
    public List<User> searchUsers(@RequestBody List<SearchCriteria> searchCriteriaList,
                                  @RequestParam(required = false) String sortColumn,
                                  @RequestParam(required = false) String sortDirection) {
        return userService.searchUsers(searchCriteriaList, sortColumn, sortDirection);
    }

    // Other controller methods for CRUD operations or other functionalities

}


@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> searchUsers(List<SearchCriteria> searchCriteriaList, String sortColumn, String sortDirection) {
        Sort sort = createSort(sortColumn, sortDirection);
        return userRepository.findAll((root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            for (SearchCriteria criteria : searchCriteriaList) {
                // ... same as previous code for search criteria ...

            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        }, sort);
    }

    private Sort createSort(String sortColumn, String sortDirection) {
        // Default sort by created date if sortColumn is null or empty
        if (StringUtils.isEmpty(sortColumn)) {
            sortColumn = "createdDate";
        }

        if ("desc".equalsIgnoreCase(sortDirection)) {
            return Sort.by(Sort.Direction.DESC, sortColumn);
        } else {
            return Sort.by(Sort.Direction.ASC, sortColumn);
        }
    }

    // ... other methods for handling predicates and sorting ...
}



####################### SNAKE CASE#####################

@Service
public class UserService {
    // ... (existing code remains the same)

    public List<User> searchUsersWithSorting(List<SearchCriteria> searchCriteriaList, String sortColumn, String sortDirection) {
        Sort sort = createSortFromColumnAndDirection(sortColumn, sortDirection);
        return userRepository.findAll((root, query, criteriaBuilder) -> {
            Predicate predicate = buildPredicate(searchCriteriaList, criteriaBuilder, root);
            query.where(predicate);
            return query.getRestriction();
        }, sort);
    }

    private Predicate buildPredicate(List<SearchCriteria> searchCriteriaList, CriteriaBuilder criteriaBuilder, Root<User> root) {
        // ... (existing buildPredicate logic remains the same)
    }

    private Sort createSortFromColumnAndDirection(String sortColumn, String sortDirection) {
        String camelCaseColumn = convertToCamelCase(sortColumn);
        Sort.Direction direction;

        try {
            direction = Sort.Direction.valueOf(sortDirection.toUpperCase());
        } catch (IllegalArgumentException e) {
            direction = Sort.Direction.ASC;
        }

        if (StringUtils.isEmpty(camelCaseColumn)) {
            // Set the default sort to createdDate
            return Sort.by(Sort.Order.by("createdDate").with(direction));
        }

        return Sort.by(Sort.Order.by(camelCaseColumn).with(direction));
    }

    private String convertToCamelCase(String snakeCaseColumn) {
        // ... (existing convertToCamelCase logic remains the same)
    }
}


    private String convertToCamelCase(String snakeCaseColumn) {
        // ... (existing convertToCamelCase logic remains the same)
    }
}



private String convertToCamelCase(String snakeCaseColumn) {
        String[] parts = snakeCaseColumn.split("_");
        StringBuilder camelCaseBuilder = new StringBuilder(parts[0]);
        
        for (int i = 1; i < parts.length; i++) {
            String part = parts[i];
            camelCaseBuilder.append(part.substring(0, 1).toUpperCase());
            camelCaseBuilder.append(part.substring(1));
        }

        return camelCaseBuilder.toString();
    }


##################################################################################################################

@Service
public class UserService {
    // ... (existing code remains the same)

    public List<User> searchUsersWithSorting(List<SearchCriteria> searchCriteriaList, String sortColumn, String sortDirection) {

if (sortColumn == null || sortColumn.isEmpty()) {
            sortColumn = "created_date"; // Set default sorting column to "created_date"
        }
        if (sortDirection == null || sortDirection.isEmpty()) {
            sortDirection = "asc"; // Set default sorting direction to "asc"
        }
        Sort sort = createSortFromColumnAndDirection(sortColumn, sortDirection);
        return userRepository.findAll((root, query, criteriaBuilder) -> {
            Predicate predicate = buildPredicate(searchCriteriaList, criteriaBuilder, root);
            query.where(predicate);
            return query.getRestriction();
        }, sort);
    }

    private Predicate buildPredicate(List<SearchCriteria> searchCriteriaList, CriteriaBuilder criteriaBuilder, Root<User> root) {
        // ... (existing buildPredicate logic remains the same)
    }

    private Sort createSortFromColumnAndDirection(String sortColumn, String sortDirection) {
        String columnName = convertToSnakeCase(sortColumn);
        Sort.Direction direction = Sort.Direction.fromStringOrNull(sortDirection);

        if (direction == null) {
            direction = Sort.Direction.ASC;
        }

        return Sort.by(direction, columnName);
    }

    private String convertToSnakeCase(String camelCaseColumn) {
        String regex = "([a-z])([A-Z]+)";
        String replacement = "$1_$2";
        return camelCaseColumn.replaceAll(regex, replacement).toLowerCase();
    }

    private String convertToCamelCase(String snakeCaseColumn) {
        String[] parts = snakeCaseColumn.split("_");
        StringBuilder camelCaseBuilder = new StringBuilder(parts[0]);

        for (int i = 1; i < parts.length; i++) {
            String part = parts[i];
            camelCaseBuilder.append(part.substring(0, 1).toUpperCase());
            camelCaseBuilder.append(part.substring(1));
        }

        return camelCaseBuilder.toString();
    }
}
