###### ENUM ##########

public enum QueryOperation {
    EQUALS("="),
    CONTAINS("like"),
    GREATER_THAN(">"),
    // Add more operations as needed

    private final String operator;

    QueryOperation(String operator) {
        this.operator = operator;
    }

    public String getOperator() {
        return operator;
    }
}


#######  Search CRIteria #########

public class SearchCriteria {
    private String key;
    private QueryOperation operation;
    private Object value;

    // Constructor, getters, and setters
}





######## Controller ###########

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class UserController {

    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping("/users/search")
    public List<User> searchUsers(@RequestBody List<SearchCriteria> searchCriteriaList) {
        // Convert search criteria list to JPA Specification
        Specification<User> specification = createSpecification(searchCriteriaList);

        // Use the specification to search for users
        return userRepository.findAll(specification);
    }

    private Specification<User> createSpecification(List<SearchCriteria> searchCriteriaList) {
        return (root, query, criteriaBuilder) -> {
            Predicate predicate = criteriaBuilder.conjunction();

            for (SearchCriteria criteria : searchCriteriaList) {
                String key = criteria.getKey();
                String operation = criteria.getOperation();
                Object value = criteria.getValue();

                // Apply the appropriate operation based on the search criteria
                if (operation.equals("equals")) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(key), value));
                } else if (operation.equals("contains")) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(root.get(key), "%" + value + "%"));
                } else if (operation.equals("greaterThan")) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.greaterThan(root.get(key), (Comparable) value));
                }
                // Add more operations as needed

            }

            return predicate;
        };
    }
}

######################################################################################################################################################333



#### ENUM  ####

public enum QueryOperation {
    EQUALS("eq"),
    NOT_EQUALS("neq");

    private final String operator;

    QueryOperation(String operator) {
        this.operator = operator;
    }

    public String getOperator() {
        return operator;
    }
}


##### SEARCH CRITERIA ##########
public class SearchCriteria {
    private String key;
    private QueryOperation operation;
    private Object value;

    // Constructor, getters, and setters
}



########## COntroller ##############3

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.persistence.criteria.Predicate;
import java.util.List;

@RestController
public class UserController {

    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping("/users/search")
    public List<User> searchUsers(@RequestBody List<SearchCriteria> searchCriteriaList) {
        Specification<User> specification = createSpecification(searchCriteriaList);
        return userRepository.findAll(specification);
    }

    private Specification<User> createSpecification(List<SearchCriteria> searchCriteriaList) {
        return (root, query, criteriaBuilder) -> {
            Predicate predicate = criteriaBuilder.conjunction();

            for (SearchCriteria criteria : searchCriteriaList) {
                String key = criteria.getKey();
                QueryOperation operation = criteria.getOperation();
                Object value = criteria.getValue();

                // Apply the appropriate operation based on the search criteria
                if (operation == QueryOperation.EQUALS) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(key), value));
                } else if (operation == QueryOperation.NOT_EQUALS) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.notEqual(root.get(key), value));
                }
                // Add more operations as needed
            }

            return predicate;
        };
    }
}



####################################################################################################################################




##### SERVICE LAYER

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> searchUsers(List<SearchCriteria> searchCriteriaList) {
        Specification<User> specification = createSpecification(searchCriteriaList);
        return userRepository.findAll(specification);
    }

    private Specification<User> createSpecification(List<SearchCriteria> searchCriteriaList) {
        return (root, query, criteriaBuilder) -> {
            Predicate predicate = criteriaBuilder.conjunction();

            for (SearchCriteria criteria : searchCriteriaList) {
                String key = criteria.getKey();
                QueryOperation operation = criteria.getOperation();
                Object value = criteria.getValue();

                // Apply the appropriate operation based on the search criteria
                if (operation == QueryOperation.EQUALS) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(key), value));
                } else if (operation == QueryOperation.NOT_EQUALS) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.notEqual(root.get(key), value));
                }
                // Add more operations as needed
            }

            return predicate;
        };
    }
}



#### CONTROLLER ##########

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/users/search")
    public List<User> searchUsers(@RequestBody List<SearchCriteria> searchCriteriaList) {
        return userService.searchUsers(searchCriteriaList);
    }
}
##################################################################################


##### To return all values. Eg John entered, return Jonny, Johnathan      #######

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.List;

@Service
public class UserService {

    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> searchUsers(List<SearchCriteria> searchCriteriaList) {
        return userRepository.findAll((root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            for (SearchCriteria criteria : searchCriteriaList) {
                String key = criteria.getKey();
                QueryOperation operation = criteria.getOperation();
                String value = criteria.getValue().toString().toLowerCase();

                // Apply the appropriate operation based on the search criteria
                if (operation == QueryOperation.EQUALS) {
                    predicates.add(criteriaBuilder.like(criteriaBuilder.lower(root.get(key)), "%" + value + "%"));
                } else if (operation == QueryOperation.NOT_EQUALS) {
                    predicates.add(criteriaBuilder.notLike(criteriaBuilder.lower(root.get(key)), "%" + value + "%"));
                }
                // Add more operations as needed
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        });
    }
}








