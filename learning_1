@Entity
@Table(name = "profiles")
public class Profile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private LocalDate dob;
    private String status;

    @ManyToMany
    @JoinTable(name = "profile_source",
               joinColumns = @JoinColumn(name = "profile_id"),
               inverseJoinColumns = @JoinColumn(name = "source_id"))
    private Set<Source> sourceList = new HashSet<>();

    // Getters and setters
}


@Entity
@Table(name = "sources")
public class Source {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String sourceName;

    // Getters and setters
}



@Repository
public class ProfileRepositoryImpl implements ProfileRepositoryCustom {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public List<Profile> findByCriteria(List<SearchCriteria> criteria) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Profile> query = cb.createQuery(Profile.class);
        Root<Profile> root = query.from(Profile.class);

        List<Predicate> predicates = new ArrayList<>();
        for (SearchCriteria criterion : criteria) {
            String key = criterion.getQueryKey();
            QueryOperation operation = criterion.getQueryOperation();
            Object value = criterion.getQueryValue();

            switch (operation) {
                case EQUALS:
                    predicates.add(cb.equal(root.get(key), value));
                    break;
                case NOT_EQUALS:
                    predicates.add(cb.notEqual(root.get(key), value));
                    break;
                case IN:
                    if (value instanceof List) {
                        predicates.add(root.get(key).in((List<?>) value));
                    }
                    break;
                case NOT_IN:
                    if (value instanceof List) {
                        predicates.add(cb.not(root.get(key).in((List<?>) value)));
                    }
                    break;
                case CONTAINS:
                    if (value instanceof String) {
                        predicates.add(cb.like(root.get(key), "%" + value + "%"));
                    }
                    break;
                case NOT_CONTAINS:
                    if (value instanceof String) {
                        predicates.add(cb.notLike(root.get(key), "%" + value + "%"));
                    }
                    break;
                // Add other cases for additional QueryOperation values if needed.
            }
        }

        query.where(cb.and(predicates.toArray(new Predicate[0])));
        TypedQuery<Profile> typedQuery = entityManager.createQuery(query);
        return typedQuery.getResultList();
    }
}
