### NEW LOGIC ####

@Entity
@Table(name = "main_profile")
public class MainProfile {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    private LocalDate dob;
    
    private String status;
    
    @OneToMany(mappedBy = "mainProfile", cascade = CascadeType.ALL)
    private List<Source> sourceList = new ArrayList<>();
    
    // Other columns and getters/setters as needed

}



@Entity
@Table(name = "source")
public class Source {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String value;
    
    @ManyToOne
    @JoinColumn(name = "profile_id")
    private MainProfile mainProfile;
    
    // Getters/setters and constructors as needed

}


######## SERVICE ###########333
@Service
public class MainProfileService {

    @Autowired
    private MainProfileRepository mainProfileRepository;

    @Autowired
    private EntityManager entityManager;

    public MainProfile createProfile(MainProfile mainProfile) {
        return mainProfileRepository.save(mainProfile);
    }

    public List<MainProfile> searchProfiles(List<SearchCriteria> searchCriteriaList) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<MainProfile> criteriaQuery = criteriaBuilder.createQuery(MainProfile.class);
        Root<MainProfile> root = criteriaQuery.from(MainProfile.class);

        List<Predicate> predicates = new ArrayList<>();
        for (SearchCriteria criteria : searchCriteriaList) {
            String key = criteria.getKey();
            QueryOperation operation = criteria.getOperation();
            Object value = criteria.getValue();

            switch (operation) {
                case EQUALS:
                    predicates.add(criteriaBuilder.equal(root.get(key), value));
                    break;
                case NOT_EQUALS:
                    predicates.add(criteriaBuilder.notEqual(root.get(key), value));
                    break;
                case IN:
                    if (value instanceof List) {
                        predicates.add(root.get(key).in((List<?>) value));
                    } else {
                        predicates.add(criteriaBuilder.equal(root.get(key), value));
                    }
                    break;
                case NOT_IN:
                    if (value instanceof List) {
                        predicates.add(criteriaBuilder.not(root.get(key).in((List<?>) value)));
                    } else {
                        predicates.add(criteriaBuilder.notEqual(root.get(key), value));
                    }
                    break;
                case CONTAINS:
                    if (value instanceof List) {
                        for (Object item : (List<?>) value) {
                            predicates.add(criteriaBuilder.like(root.get(key), "%" + item + "%"));
                        }
                    } else {
                        predicates.add(criteriaBuilder.like(root.get(key), "%" + value + "%"));
                    }
                    break;
                case NOT_CONTAINS:
                    if (value instanceof List) {
                        for (Object item : (List<?>) value) {
                            predicates.add(criteriaBuilder.notLike(root.get(key), "%" + item + "%"));
                        }
                    } else {
                        predicates.add(criteriaBuilder.notLike(root.get(key), "%" + value + "%"));
                    }
                    break;
            }
        }

        criteriaQuery.where(predicates.toArray(new Predicate[0]));
        return entityManager.createQuery(criteriaQuery).getResultList();
    }
}


###### CONTROLLER #########

@RestController
@RequestMapping("/profiles")
public class MainProfileController {

    @Autowired
    private MainProfileService mainProfileService;

    @PostMapping("/create")
    public ResponseEntity<MainProfile> createProfile(@RequestBody MainProfile mainProfile) {
        MainProfile createdProfile = mainProfileService.createProfile(mainProfile);
        return ResponseEntity.ok(createdProfile);
    }

    @PostMapping("/search")
    public ResponseEntity<List<MainProfile>> searchProfiles(@RequestBody List<SearchCriteria> searchCriteriaList) {
        List<MainProfile> result = mainProfileService.searchProfiles(searchCriteriaList);
        return ResponseEntity.ok(result);
    }
}
