import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import javax.persistence.*;
import java.util.Date;
import java.util.Set;

@Entity
@Table(name = "profile")
public class Profile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @JsonDeserialize(using = CustomDateDeserializer.class)
    @Temporal(TemporalType.DATE)
    @Column(name = "dob")
    private Date dateOfBirth;

    private String status;

    @ElementCollection
    @CollectionTable(name = "profile_source_list", joinColumns = @JoinColumn(name = "profile_id"))
    @Column(name = "source_list")
    private Set<String> sourceListAttribute;

    private String countries;

    @Column(name = "class")
    private String profileClass;

    @JsonDeserialize(using = CustomDateDeserializer.class)
    @Temporal(TemporalType.DATE)
    @Column(name = "creation_date")
    private Date creationDate;

    @JsonDeserialize(using = CustomDateDeserializer.class)
    @Temporal(TemporalType.DATE)
    @Column(name = "last_updated_date")
    private Date lastUpdatedDate;

    // Getters and setters, constructors, and other methods...
}




#########################################################################


  import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CustomDateDeserializer extends JsonDeserializer<Date> {
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

    @Override
    public Date deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
        String date = jsonParser.getText();
        try {
            return dateFormat.parse(date);
        } catch (ParseException e) {
            throw new IOException("Failed to parse date: " + date, e);
        }
    }
}


###########################################################################################33

  import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional
public class ProfileServiceImpl implements ProfileService {

    private final ProfileRepository profileRepository;
    private final EntityManager entityManager;

    @Autowired
    public ProfileServiceImpl(ProfileRepository profileRepository, EntityManager entityManager) {
        this.profileRepository = profileRepository;
        this.entityManager = entityManager;
    }

    @Override
    public Profile createProfile(Profile profile) {
        return profileRepository.save(profile);
    }

    @Override
    public SearchResponse<Profile> searchProfiles(SearchRequest searchRequest) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<Profile> query = cb.createQuery(Profile.class);
        Root<Profile> root = query.from(Profile.class);
        query.select(root).where(buildPredicates(searchRequest.getSearchCriteria(), cb, root));

        // Sort the results if sortColumn and sortDirection are provided
        if (searchRequest.getSortColumn() != null && searchRequest.getSortDirection() != null) {
            Sort sort = Sort.by(searchRequest.getSortDirection(), searchRequest.getSortColumn());
            query.orderBy(getSortOrder(sort, cb, root));
        }

        TypedQuery<Profile> typedQuery = entityManager.createQuery(query);

        // Calculate the total number of results without pagination
        int totalResults = typedQuery.getResultList().size();

        // Perform manual pagination
        int page = searchRequest.getPage();
        int pageSize = searchRequest.getPageSize();
        int startPosition = page * pageSize;

        typedQuery.setFirstResult(startPosition);
        typedQuery.setMaxResults(pageSize);

        List<Profile> resultList = typedQuery.getResultList();

        SearchResponse<Profile> searchResponse = new SearchResponse<>();
        searchResponse.setData(new PageImpl<>(resultList, PageRequest.of(page, pageSize), totalResults));
        searchResponse.setTotalElements((long) totalResults);
        searchResponse.setTotalPages((int) Math.ceil((double) totalResults / pageSize));

        return searchResponse;
    }

    private Predicate[] buildPredicates(List<SearchCriteria> searchCriteria, CriteriaBuilder cb, Root<Profile> root) {
        // ... (same as before)
    }

    private Object convertToProperType(Object value) {
        if (value instanceof String) {
            try {
                return new SimpleDateFormat("dd-MM-yyyy").parse((String) value);
            } catch (ParseException e) {
                // If parsing fails, return the original string as-is
                return value;
            }
        }
        return value;
    }

    private List<String> convertToProperTypeList(Object value) {
        // ... (same as before)
    }

    private List<javax.persistence.criteria.Order> getSortOrder(Sort sort, CriteriaBuilder cb, Root<Profile> root) {
        // ... (same as before)
    }
}
